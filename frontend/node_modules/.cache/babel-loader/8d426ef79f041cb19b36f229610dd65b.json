{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\naras\\\\Desktop\\\\weatherapp\\\\frontend\\\\src\\\\components\\\\HourlyForecast.js\";\nimport React from 'react';\nimport './styles/HourlyForecast.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction groupByDate(hourlyData, selectedDay) {\n  const grouped = {};\n  hourlyData.time.forEach((time, index) => {\n    const date = new Date(time).toLocaleDateString(undefined, {\n      weekday: 'long',\n      month: 'long',\n      day: 'numeric'\n    });\n    if (!grouped[date]) {\n      grouped[date] = [];\n    }\n    grouped[date].push({\n      time: new Date(time).toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      }),\n      temperature: hourlyData.temperature_2m[index],\n      weatherCode: hourlyData.weathercode[index],\n      windSpeed: hourlyData.windspeed_10m[index],\n      humidity: hourlyData.relativehumidity_2m[index],\n      cloudCover: hourlyData.cloudcover[index],\n      uvIndex: hourlyData.uv_index[index]\n    });\n  });\n  const selectedDate = Object.keys(grouped)[selectedDay];\n  return grouped[selectedDate] || [];\n}\nfunction HourlyForecast({\n  data,\n  selectedDay\n}) {\n  const hourlyDataForSelectedDay = groupByDate(data, selectedDay);\n  if (hourlyDataForSelectedDay.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No hourly data available for this day.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hourly-forecast\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Hourly Weather Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hourly-grid\",\n      children: hourlyDataForSelectedDay.map((hour, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hourly-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: hour.time\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 28\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Temp: \", hour.temperature, \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Weather Code: \", hour.weatherCode]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Wind: \", hour.windSpeed, \" km/h\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Humidity: \", hour.humidity, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Cloud Cover: \", hour.cloudCover, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"UV Index: \", hour.uvIndex]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_c = HourlyForecast;\nexport default HourlyForecast;\nvar _c;\n$RefreshReg$(_c, \"HourlyForecast\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","groupByDate","hourlyData","selectedDay","grouped","time","forEach","index","date","Date","toLocaleDateString","undefined","weekday","month","day","push","toLocaleTimeString","hour","minute","temperature","temperature_2m","weatherCode","weathercode","windSpeed","windspeed_10m","humidity","relativehumidity_2m","cloudCover","cloudcover","uvIndex","uv_index","selectedDate","Object","keys","HourlyForecast","data","hourlyDataForSelectedDay","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","idx","_c","$RefreshReg$"],"sources":["C:/Users/naras/Desktop/weatherapp/frontend/src/components/HourlyForecast.js"],"sourcesContent":["import React from 'react';\r\nimport './styles/HourlyForecast.css';\r\n\r\nfunction groupByDate(hourlyData, selectedDay) {\r\n    const grouped = {};\r\n\r\n    hourlyData.time.forEach((time, index) => {\r\n        const date = new Date(time).toLocaleDateString(undefined, {\r\n            weekday: 'long',\r\n            month: 'long',\r\n            day: 'numeric',\r\n        });\r\n\r\n        if (!grouped[date]) {\r\n            grouped[date] = [];\r\n        }\r\n\r\n        grouped[date].push({\r\n            time: new Date(time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\r\n            temperature: hourlyData.temperature_2m[index],\r\n            weatherCode: hourlyData.weathercode[index],\r\n            windSpeed: hourlyData.windspeed_10m[index],\r\n            humidity: hourlyData.relativehumidity_2m[index],\r\n            cloudCover: hourlyData.cloudcover[index],\r\n            uvIndex: hourlyData.uv_index[index],\r\n        });\r\n    });\r\n\r\n    const selectedDate = Object.keys(grouped)[selectedDay];\r\n    return grouped[selectedDate] || [];\r\n}\r\n\r\nfunction HourlyForecast({ data, selectedDay }) {\r\n    const hourlyDataForSelectedDay = groupByDate(data, selectedDay);\r\n\r\n    if (hourlyDataForSelectedDay.length === 0) {\r\n        return <p>No hourly data available for this day.</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"hourly-forecast\">\r\n            <h2>Hourly Weather Forecast</h2>\r\n            <div className=\"hourly-grid\">\r\n                {hourlyDataForSelectedDay.map((hour, idx) => (\r\n                    <div key={idx} className=\"hourly-row\">\r\n                        <p><strong>{hour.time}</strong></p>\r\n                        <p>Temp: {hour.temperature}Â°C</p>\r\n                        <p>Weather Code: {hour.weatherCode}</p>\r\n                        <p>Wind: {hour.windSpeed} km/h</p>\r\n                        <p>Humidity: {hour.humidity}%</p>\r\n                        <p>Cloud Cover: {hour.cloudCover}%</p>\r\n                        <p>UV Index: {hour.uvIndex}</p>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HourlyForecast;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}