{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\naras\\\\Desktop\\\\weatherapp\\\\frontend\\\\src\\\\components\\\\WeatherApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport SearchBar from './SearchBar';\nimport CurrentWeather from './CurrentWeather';\nimport Forecast from './Forecast';\nimport './styles/WeatherApp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WeatherApp() {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [forecastData, setForecastData] = useState(null);\n  const handleSearch = location => {\n    console.log(\"Searching for:\", location);\n\n    // Fetch current weather data from your Spring Boot backend\n    fetch(`http://localhost:8080/api/weather/current?location=${location}`).then(response => response.json()).then(data => {\n      console.log(\"Current weather data received:\", data);\n      setWeatherData(data);\n    }).catch(error => {\n      console.error(\"Error fetching current weather:\", error);\n      setWeatherData(null); // Clear the weather data if there's an error\n    });\n\n    // Fetch weather forecast data from your Spring Boot backend\n    fetch(`http://localhost:8080/api/weather/forecast?location=${location}`).then(response => response.json()).then(data => {\n      console.log(\"Forecast data received:\", data);\n      setForecastData(data);\n    }).catch(error => {\n      console.error(\"Error fetching forecast:\", error);\n      setForecastData(null); // Clear the forecast data if there's an error\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), weatherData ? /*#__PURE__*/_jsxDEV(CurrentWeather, {\n      data: weatherData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 28\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading current weather...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 68\n    }, this), forecastData ? /*#__PURE__*/_jsxDEV(Forecast, {\n      data: forecastData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 29\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading forecast...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 64\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(WeatherApp, \"nnMLQnIhxCIsI5sbBKk5rAgk1VE=\");\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useState","SearchBar","CurrentWeather","Forecast","jsxDEV","_jsxDEV","WeatherApp","_s","weatherData","setWeatherData","forecastData","setForecastData","handleSearch","location","console","log","fetch","then","response","json","data","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","_c","$RefreshReg$"],"sources":["C:/Users/naras/Desktop/weatherapp/frontend/src/components/WeatherApp.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport SearchBar from './SearchBar';\r\nimport CurrentWeather from './CurrentWeather';\r\nimport Forecast from './Forecast';\r\nimport './styles/WeatherApp.css';\r\n\r\nfunction WeatherApp() {\r\n    const [weatherData, setWeatherData] = useState(null);\r\n    const [forecastData, setForecastData] = useState(null);\r\n\r\n    const handleSearch = (location) => {\r\n        console.log(\"Searching for:\", location);\r\n\r\n        // Fetch current weather data from your Spring Boot backend\r\n        fetch(`http://localhost:8080/api/weather/current?location=${location}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(\"Current weather data received:\", data);\r\n                setWeatherData(data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching current weather:\", error);\r\n                setWeatherData(null);  // Clear the weather data if there's an error\r\n            });\r\n\r\n        // Fetch weather forecast data from your Spring Boot backend\r\n        fetch(`http://localhost:8080/api/weather/forecast?location=${location}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(\"Forecast data received:\", data);\r\n                setForecastData(data);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error fetching forecast:\", error);\r\n                setForecastData(null);  // Clear the forecast data if there's an error\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className=\"weather-app\">\r\n            <h1>Weather App</h1>\r\n            <SearchBar onSearch={handleSearch} />\r\n            {weatherData ? <CurrentWeather data={weatherData} /> : <p>Loading current weather...</p>}\r\n            {forecastData ? <Forecast data={forecastData} /> : <p>Loading forecast...</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherApp;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAO,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMY,YAAY,GAAIC,QAAQ,IAAK;IAC/BC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,QAAQ,CAAC;;IAEvC;IACAG,KAAK,CAAC,sDAAsDH,QAAQ,EAAE,CAAC,CAClEI,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACVN,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEK,IAAI,CAAC;MACnDX,cAAc,CAACW,IAAI,CAAC;IACxB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZR,OAAO,CAACQ,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvDb,cAAc,CAAC,IAAI,CAAC,CAAC,CAAE;IAC3B,CAAC,CAAC;;IAEN;IACAO,KAAK,CAAC,uDAAuDH,QAAQ,EAAE,CAAC,CACnEI,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACVN,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEK,IAAI,CAAC;MAC5CT,eAAe,CAACS,IAAI,CAAC;IACzB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZR,OAAO,CAACQ,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDX,eAAe,CAAC,IAAI,CAAC,CAAC,CAAE;IAC5B,CAAC,CAAC;EACV,CAAC;EAED,oBACIN,OAAA;IAAKkB,SAAS,EAAC,aAAa;IAAAC,QAAA,gBACxBnB,OAAA;MAAAmB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBvB,OAAA,CAACJ,SAAS;MAAC4B,QAAQ,EAAEjB;IAAa;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACpCpB,WAAW,gBAAGH,OAAA,CAACH,cAAc;MAACkB,IAAI,EAAEZ;IAAY;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAAGvB,OAAA;MAAAmB,QAAA,EAAG;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EACvFlB,YAAY,gBAAGL,OAAA,CAACF,QAAQ;MAACiB,IAAI,EAAEV;IAAa;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAAGvB,OAAA;MAAAmB,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5E,CAAC;AAEd;AAACrB,EAAA,CAxCQD,UAAU;AAAAwB,EAAA,GAAVxB,UAAU;AA0CnB,eAAeA,UAAU;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}